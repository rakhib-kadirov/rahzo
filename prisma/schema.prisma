// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model posts_user {
//   id_post    Int      @id @default(autoincrement())
//   users_id   Int
//   body_text  String   @db.VarChar(1000)
//   date       DateTime @default(now()) @db.Timestamp(0)
//   first_name String   @db.VarChar(255)
//   last_name  String   @db.VarChar(255)
//   users      users    @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

//   @@index([users_id], map: "users_id")
// }

// model users {
//   id            Int          @id @default(autoincrement())
//   login         String       @unique @db.VarChar(45)
//   password      String       @db.Text
//   first_name    String       @db.Text
//   last_name     String       @db.Text
//   profile_photo String?      @db.Text
//   status        String?      @db.VarChar(10)
//   message       message[]
//   posts_user    posts_user[]
//   ChatUser      ChatUser[]
// }

// model Chat {
//   id        Int        @id @default(autoincrement())
//   type      String // 'private' или 'group'
//   createdAt DateTime   @default(now()) @db.Timestamp(0)
//   messages  message[]
//   users     ChatUser[]
// }

// model ChatUser {
//   chatId Int
//   userId Int
//   chat   Chat  @relation(fields: [chatId], references: [id])
//   user   users @relation(fields: [userId], references: [id])

//   @@id([chatId, userId])
// }

// model message {
//   id            Int      @id @default(autoincrement())
//   text          String   @db.Text
//   userId        Int
//   createdAt     DateTime @default(now()) @db.Timestamp(0)
//   chatId        Int
//   first_name    String   @db.Text
//   last_name     String   @db.Text
//   profile_photo String?  @db.Text
//   chat          Chat     @relation(fields: [chatId], references: [id])
//   users         users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

//   @@index([userId], map: "userId")
//   @@index([chatId], map: "chatId")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model friends {
//   id            Int     @id @unique(map: "id_UNIQUE")
//   first_name    String  @db.VarChar(45)
//   last_name     String  @db.VarChar(45)
//   profile_photo String? @db.VarChar(45)
// }

model posts_user {
  id_post    Int      @id @default(autoincrement())
  users_id   Int
  body_text  String   @db.VarChar(1000)
  date       DateTime @default(now()) @db.Timestamp(0)
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  users      users    @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([users_id], map: "users_id")
}

model users {
  id            Int          @id @default(autoincrement())
  login         String       @unique @db.VarChar(45)
  password      String       @db.Text
  first_name    String       @db.Text
  last_name     String       @db.Text
  profile_photo String?      @db.Text
  status        String?      @db.VarChar(10)
  message       message[]
  posts_user    posts_user[]

  chats ChatParticipants[]
}

model message {
  id            Int      @id @default(autoincrement())
  text          String   @db.Text
  userId        Int
  chatId        Int
  createdAt     DateTime @default(now()) @db.Timestamp(0)
  first_name    String   @db.Text
  last_name     String   @db.Text
  profile_photo String?  @db.Text
  users         users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "message_ibfk_1")
  chat          chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "userId")
  @@index([chatId], map: "chatId")
}

model chat {
  id           Int                @id @default(autoincrement())
  createdAt    DateTime           @default(now())
  participants ChatParticipants[]
  message      message[]
}

model ChatParticipants {
  chatId Int
  userId Int
  chat   chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user   users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId]) // Уникальный составной ключ
  @@index([chatId], map: "chatPartId")
}
